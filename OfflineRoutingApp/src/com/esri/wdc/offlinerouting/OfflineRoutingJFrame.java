/*******************************************************************************
 * Copyright 2014 Esri
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 ******************************************************************************/
package com.esri.wdc.offlinerouting;

import com.esri.core.map.Graphic;
import com.esri.core.symbol.SimpleLineSymbol;
import com.esri.core.symbol.SimpleMarkerSymbol;
import com.esri.core.symbol.SimpleMarkerSymbol.Style;
import com.esri.core.symbol.TextSymbol;
import com.esri.core.tasks.na.NAFeaturesAsFeature;
import com.esri.core.tasks.na.Route;
import com.esri.core.tasks.na.RouteParameters;
import com.esri.core.tasks.na.RouteResult;
import com.esri.core.tasks.na.RouteTask;
import com.esri.map.GraphicsLayer;
import com.esri.map.JMap;
import com.esri.map.MapOptions;
import com.esri.toolkit.overlays.DrawingCompleteEvent;
import com.esri.toolkit.overlays.DrawingCompleteListener;
import com.esri.toolkit.overlays.DrawingOverlay;
import com.esri.toolkit.overlays.DrawingOverlay.DrawingMode;
import java.awt.Color;
import java.awt.Frame;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 * Main class for an application that uses ArcGIS Runtime to perform offline routing.
 */
public class OfflineRoutingJFrame extends javax.swing.JFrame {

    private final DrawingOverlay drawingOverlay = new DrawingOverlay();
    private final GraphicsLayer graphicsLayer = new GraphicsLayer();
    private final NAFeaturesAsFeature stops = new NAFeaturesAsFeature();
    private final NAFeaturesAsFeature barriers = new NAFeaturesAsFeature();
    private int numStops = 0;

    /**
     * Constructs the JFrame.
     */
    public OfflineRoutingJFrame() {
        initComponents();
        
        setExtendedState(getExtendedState() | Frame.MAXIMIZED_BOTH);

        map.getLayers().add(graphicsLayer);

        map.addMapOverlay(drawingOverlay);
        drawingOverlay.addDrawingCompleteListener(new DrawingCompleteListener() {
            @Override
            public void drawingCompleted(DrawingCompleteEvent arg0) {
                Graphic graphic = (Graphic) drawingOverlay.getAndClearFeature();
                graphicsLayer.addGraphic(graphic);
                if (graphic.getAttributeValue("type").equals("Stop")) {
                    numStops++;
                    stops.addFeature(graphic);
                    graphicsLayer.addGraphic(new Graphic(graphic.getGeometry(), new TextSymbol(12, String
                            .valueOf(numStops), Color.WHITE)));
                } else if (graphic.getAttributeValue("type").equals("Barrier")) {
                    barriers.addFeature(graphic);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        map = new JMap(new MapOptions(MapOptions.MapType.TOPO, 32.715, -117.1625, 12));
        jToggleButton_addBarrier = new javax.swing.JToggleButton();
        jButton_solveRoute = new javax.swing.JButton();
        jButton_reset = new javax.swing.JButton();
        jToggleButton_addStop = new javax.swing.JToggleButton();
        jCheckBox_preserveOrder = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToggleButton_addBarrier.setText("Add Barrier");
        jToggleButton_addBarrier.setFocusable(false);
        jToggleButton_addBarrier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_addBarrierActionPerformed(evt);
            }
        });

        jButton_solveRoute.setText("Solve Route");
        jButton_solveRoute.setFocusable(false);
        jButton_solveRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_solveRouteActionPerformed(evt);
            }
        });

        jButton_reset.setText("Reset");
        jButton_reset.setFocusable(false);
        jButton_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_resetActionPerformed(evt);
            }
        });

        jToggleButton_addStop.setText("Add Stop");
        jToggleButton_addStop.setFocusable(false);
        jToggleButton_addStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_addStopActionPerformed(evt);
            }
        });

        jCheckBox_preserveOrder.setText("Preserve order of stops");
        jCheckBox_preserveOrder.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton_addStop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton_addBarrier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_solveRoute)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_reset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_preserveOrder)
                .addContainerGap(320, Short.MAX_VALUE))
            .addComponent(map, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton_addStop)
                    .addComponent(jToggleButton_addBarrier)
                    .addComponent(jButton_solveRoute)
                    .addComponent(jButton_reset)
                    .addComponent(jCheckBox_preserveOrder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(map, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton_addBarrierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_addBarrierActionPerformed
        jToggleButton_addStop.setSelected(false);
        drawingOverlay.setActive(jToggleButton_addBarrier.isSelected());
        if (jToggleButton_addBarrier.isSelected()) {
            HashMap<String, Object> attributes = new HashMap<>();
            attributes.put("type", "Barrier");
            drawingOverlay.setUp(
                    DrawingMode.POINT,
                    new SimpleMarkerSymbol(Color.BLACK, 16, Style.X),
                    attributes);
        }
    }//GEN-LAST:event_jToggleButton_addBarrierActionPerformed

    private void jToggleButton_addStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_addStopActionPerformed
        jToggleButton_addBarrier.setSelected(false);
        drawingOverlay.setActive(jToggleButton_addStop.isSelected());
        if (jToggleButton_addStop.isSelected()) {
            HashMap<String, Object> attributes = new HashMap<>();
            attributes.put("type", "Stop");
            drawingOverlay.setUp(
                    DrawingMode.POINT,
                    new SimpleMarkerSymbol(Color.BLUE, 25, Style.CIRCLE),
                    attributes);
        }
    }//GEN-LAST:event_jToggleButton_addStopActionPerformed

    private void jButton_solveRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_solveRouteActionPerformed
        RouteResult result = null;
        RouteParameters parameters = null;

        try {
            //Replace online RouteTask with offline RouteTask
//            RouteTask task = RouteTask.createOnlineRouteTask(
//                    "http://sampleserver6.arcgisonline.com/arcgis/rest/services/NetworkAnalysis/SanDiego/NAServer/Route", null);
            RouteTask task = RouteTask.createLocalRouteTask("RuntimeSanDiego.geodatabase", "Streets_ND");
            parameters = task.retrieveDefaultRouteTaskParameters();
            parameters.setOutSpatialReference(map.getSpatialReference());
            stops.setSpatialReference(map.getSpatialReference());
            parameters.setStops(stops);
            parameters.setFindBestSequence(!jCheckBox_preserveOrder.isSelected()); // opposite of 'preserve order of stops' 
            if (barriers.getFeatures().size() > 0) {
                barriers.setSpatialReference(map.getSpatialReference());
                parameters.setPointBarriers(barriers);
            }
            result = task.solve(parameters);
            showResult(result);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(getContentPane(),
                    "An error has occured. " + e.getLocalizedMessage(), "", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton_solveRouteActionPerformed

    private void showResult(RouteResult result) {
        if (result != null) {
            // display the top route on the map as a graphic 
            Route topRoute = result.getRoutes().get(0);
            Graphic routeGraphic = new Graphic(topRoute.getRouteGraphic().getGeometry(),
                    new SimpleLineSymbol(Color.BLUE, 2.0f));
            graphicsLayer.addGraphic(routeGraphic);
        }
    }

    private void jButton_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_resetActionPerformed
        graphicsLayer.removeAll();
        stops.clearFeatures();
        barriers.clearFeatures();
        numStops = 0;
    }//GEN-LAST:event_jButton_resetActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        map.dispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OfflineRoutingJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OfflineRoutingJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OfflineRoutingJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OfflineRoutingJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OfflineRoutingJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_reset;
    private javax.swing.JButton jButton_solveRoute;
    private javax.swing.JCheckBox jCheckBox_preserveOrder;
    private javax.swing.JToggleButton jToggleButton_addBarrier;
    private javax.swing.JToggleButton jToggleButton_addStop;
    private com.esri.map.JMap map;
    // End of variables declaration//GEN-END:variables
}
